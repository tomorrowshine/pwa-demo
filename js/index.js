function urlBase64ToUint8Array(base64String) {
    let padding = '='.repeat((4 - base64String.length % 4) % 4);
    let base64 = (base64String + padding)
        .replace(/\-/g, '+')
        .replace(/_/g, '/');

    let rawData = window.atob(base64);
    let outputArray = new Uint8Array(rawData.length);

    for (let i = 0; i < rawData.length; ++i) {
        outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
}

if ('serviceWorker' in navigator) {

    navigator.serviceWorker.register('/sw.js').then(
        function (swReg) {
            console.log('Service Worker is registered', swReg);
            swRegistration = swReg;
        }
    );

    document.getElementById('doIt').onclick = function () {
        swRegistration.pushManager.getSubscription()
            .then(function (subscription) {
                // subscription = { "endpoint": "https://fcm.googleapis.com/fcm/send/ci3-kIulf9A:APA91bEaQfDU8zuLSKpjzLfQ8121pNf3Rq7pjomSu4Vg-nMwLGfJSvkOUsJNCyYCOTZgmHDTu9I1xvI-dMVLZm1EgmEH0vDA7QFLjPKShG86W2zwX0IbtBPHEDLO0WgQ8OIhZ6yTnu-S", "expirationTime": null, "keys": { "p256dh": "BAdAo6ldzRT5oCN8stqYRemoihPGOEJjrUDL6y8zhdA_swao_q-HlY_69mzIVobWX2MH02TzmtRWj_VeWUFMnXQ=", "auth": "SS1PBnGwfMXjpJEfnoUIeQ==" } }
                isSubscribed = !(subscription === null);
                if (isSubscribed) {
                    updateSubscriptionOnServer(subscription);
                    console.log('User IS subscribed.');
                } else {
                    subscribeUser()
                    console.log('User is NOT subscribed.');
                }
            });
    };

    document.getElementById('sync').onclick = function () {
        if ('SyncManager' in window) {
            const tag = 'send-tag';
            navigator.serviceWorker.controller.postMessage({ tag: tag, msg: { name: 'lc' } });
            swRegistration.sync.register(tag).then(function () {
                console.log('后台同步已触发');
            }).catch(function (err) {
                console.log('后台同步触发失败', err);
            });
        } else {
            console.log('不支持后端同步');
        }
    };

    //接收sw消息
    navigator.serviceWorker.addEventListener('message', function (event) {
        console.log(event.data)
        let img = document.createElement('img');
        img.src = event.data.url;
        img.alt = event.data.title;
        document.body.appendChild(img);
    });

    function subscribeUser() {
        // const applicationServerPublicKey = "BBh0BvNIu56yhPEScv6KxycqSmpRBY2cc5-Z2697zS412keLKLuAYXDtPGVPE2uijwWhj14Ffoq1J0PhzwWOba4";
        // const applicationServerKey = urlBase64ToUint8Array(applicationServerPublicKey);
        swRegistration.pushManager.subscribe({
            userVisibleOnly: true,
            // applicationServerKey: applicationServerKey
        })
            // 用户同意
            .then(function (subscription) {
                console.log('User is subscribed:', JSON.stringify(subscription));
                updateSubscriptionOnServer(subscription);
            })
            // 用户不同意或者生成失败
            .catch(function (err) {
                alert(err);
                console.log('Failed to subscribe the user: ', err);
            });
    }
    //将订阅信息发送到服务端绑定消息推送
    function updateSubscriptionOnServer(subscription) {
        // Ask the server to send the client a notification (for testing purposes, in actual
        // applications the push notification is likely going to be generated by some event
        // in the server).
        fetch('http://127.0.0.1:8000/sendNotification', {
            method: 'post',
            mode: 'cors',
            body: JSON.stringify({
                subscription: subscription
            }),
        });
    }

    if (("Notification" in window)) {
        Notification.requestPermission().then(function (result) {
            // denied (用户拒绝了通知的显示), granted (用户允许了通知的显示), 或 default (因为不知道用户的选择，所以浏览器的行为与 denied 时相同).
            if (result === 'granted') {
                randomNotification();
            }
        });

        function randomNotification() {
            var notifTitle = 'title';
            var notifBody = 'Created by lc .';
            var notifImg = '/img/icon.png';
            var options = {
                body: notifBody,
                icon: notifImg
            }
            var notif = new Notification(notifTitle, options);
            notif.onclick = function () {
                let list = document.getElementById("list");
                list.innerHTML = notifBody;
                notif.close();
            };
        }
    }

    //分享
    if (navigator.share) {
        const sharePage = () => {
            navigator
                .share({
                    title: document.title,
                    text: document.title,
                    url: window.location.href
                })
                .then(() => console.info('Successful share.'))
                .catch(error => console.log('Error sharing:', error));
        };

        document.getElementById('share').onclick = sharePage;
    }

    let deferredPrompt;
    window.onappinstalled = function (ev) {
        alert('The application was installed.');
    };
    window.addEventListener('beforeinstallprompt', (e) => {
        const addBtn = document.getElementById('add-button');

        // Prevent Chrome 67 and earlier from automatically showing the prompt
        e.preventDefault();
        // Stash the event so it can be triggered later.
        deferredPrompt = e;
        // Update UI to notify the user they can add to home screen

        addBtn.addEventListener('click', (e) => {
            // hide our user interface that shows our A2HS buttonv
            addBtn.style.display = 'none';
            // Show the prompt
            deferredPrompt.prompt();
            // Wait for the user to respond to the prompt
            deferredPrompt.userChoice.then((choiceResult) => {
                if (choiceResult.outcome === 'accepted') {
                    console.log('User accepted the A2HS prompt');
                } else {
                    console.log('User dismissed the A2HS prompt');
                }
                deferredPrompt = null;
            });
        });
    });

}